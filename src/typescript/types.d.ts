/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */
export interface paths {
    "/internal/audit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Audit (schema generation only)
         * @description Internal endpoint used only to ensure Audit schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Audit"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Comment (schema generation only)
         * @description Internal endpoint used only to ensure Comment schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Comment"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Device (schema generation only)
         * @description Internal endpoint used only to ensure Device schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Device"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/deviceatruntimemetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DeviceAtRuntimeMetadata (schema generation only)
         * @description Internal endpoint used only to ensure DeviceAtRuntimeMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.DeviceAtRuntimeMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/devicecamerametadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DeviceCameraMetadata (schema generation only)
         * @description Internal endpoint used only to ensure DeviceCameraMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.DeviceCameraMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/devicefeaturepermissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DeviceFeaturePermissions (schema generation only)
         * @description Internal endpoint used only to ensure DeviceFeaturePermissions schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.DeviceFeaturePermissions"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/devicelocationmetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DeviceLocationMetadata (schema generation only)
         * @description Internal endpoint used only to ensure DeviceLocationMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.DeviceLocationMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/devicemetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DeviceMetadata (schema generation only)
         * @description Internal endpoint used only to ensure DeviceMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.DeviceMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/deviceplacement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get DevicePlacement (schema generation only)
         * @description Internal endpoint used only to ensure DevicePlacement schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.DevicePlacement"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/featurepermissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get FeaturePermissions (schema generation only)
         * @description Internal endpoint used only to ensure FeaturePermissions schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.FeaturePermissions"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/floorplan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get FloorPlan (schema generation only)
         * @description Internal endpoint used only to ensure FloorPlan schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.FloorPlan"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/io": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get IO (schema generation only)
         * @description Internal endpoint used only to ensure IO schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.IO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/location": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Location (schema generation only)
         * @description Internal endpoint used only to ensure Location schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Location"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/marker": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Marker (schema generation only)
         * @description Internal endpoint used only to ensure Marker schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Marker"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/markermetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MarkerMetadata (schema generation only)
         * @description Internal endpoint used only to ensure MarkerMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.MarkerMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/mediaatruntimemetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MediaAtRuntimeMetadata (schema generation only)
         * @description Internal endpoint used only to ensure MediaAtRuntimeMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.MediaAtRuntimeMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/mediametadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get MediaMetadata (schema generation only)
         * @description Internal endpoint used only to ensure MediaMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.MediaMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/preset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Preset (schema generation only)
         * @description Internal endpoint used only to ensure Preset schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Preset"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Role (schema generation only)
         * @description Internal endpoint used only to ensure Role schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Role"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/site": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Site (schema generation only)
         * @description Internal endpoint used only to ensure Site schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Site"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/sitelocationmetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get SiteLocationMetadata (schema generation only)
         * @description Internal endpoint used only to ensure SiteLocationMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.SiteLocationMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/sitemetadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get SiteMetadata (schema generation only)
         * @description Internal endpoint used only to ensure SiteMetadata schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.SiteMetadata"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/synchronize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Synchronize (schema generation only)
         * @description Internal endpoint used only to ensure Synchronize schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Synchronize"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/synchronizeevent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get SynchronizeEvent (schema generation only)
         * @description Internal endpoint used only to ensure SynchronizeEvent schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.SynchronizeEvent"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/timewindow": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get TimeWindow (schema generation only)
         * @description Internal endpoint used only to ensure TimeWindow schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.TimeWindow"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/internal/tour": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Tour (schema generation only)
         * @description Internal endpoint used only to ensure Tour schema is generated in OpenAPI spec
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["models.Tour"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new media item
         * @description Create a new media item
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            /** @description Media object */
            requestBody: {
                content: {
                    "application/json": components["schemas"]["models.Media"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.SuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/media/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a media item
         * @description Get a media item by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Media ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.SuccessResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["api.ErrorResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        "api.ErrorResponse": {
            /** @description Application-specific error code */
            applicationStatusCode?: number;
            /** @description HTTP status code for the error */
            httpStatusCode?: number;
            /** @description Error message describing the issue */
            message?: string;
            /** @description Additional metadata about the error, such as timestamps and request IDs */
            metaData?: components["schemas"]["api.Metadata"];
        };
        "api.Metadata": {
            /** @description Error message if any */
            error?: string;
            function?: string;
            organisationId?: string;
            path?: string;
            timestamp?: number;
            traceId?: string;
            userId?: string;
        };
        "api.SuccessResponse": {
            applicationStatusCode?: number;
            httpStatusCode?: number;
            message?: string;
            metaData?: components["schemas"]["api.Metadata"];
        };
        "models.Audit": {
            createdAt?: number;
            createdBy?: string;
            updatedAt?: number;
            updatedBy?: string;
        };
        "models.Comment": {
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            author?: string;
            content?: string;
            /** @description RBAC information
             *     DeviceId is a unique identifier for the device, it can be used to identify the device in the system.
             *     OrganisationId is used to identify the organisation that owns the device. */
            deviceId?: string;
            id?: string;
            organisationId?: string;
            /** @description ID of the parent comment, if this is a reply */
            parentId?: string;
            timestamps?: number[];
            /** @description Comment information */
            type?: string;
        };
        "models.Device": {
            /** @description AtRuntimeMetadata contains metadata that is generated at runtime, which can include
             *     more verbose information about the device's current state, capabilities, or configuration.
             *     for example the linked sites details, etc. */
            atRuntimeMetadata?: components["schemas"]["models.DeviceAtRuntimeMetadata"];
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            /** @description Camera Metadata */
            cameraMetadata?: components["schemas"]["models.DeviceCameraMetadata"];
            /** @description e.g. "factory", "docker", "docker compose", "kubernetes" */
            deployment?: string;
            deviceId?: string;
            /** @description e.g. "camera", "sensor", "access_control" */
            deviceType?: string;
            /** @description FeaturePermissions is used to identify the permissions of the device, such as read, write, delete, etc.
             *     It is a map of feature names to permissions.
             *     For example, "camera" can have permissions like "read", "write", "delete", etc.
             *     This allows for fine-grained control over what features are accessible by users or groups.
             *     FeaturePermissions can be used to implement Role-Based Access Control (RBAC) for devices. */
            featurePermissions?: components["schemas"]["models.DeviceFeaturePermissions"];
            groupId?: string;
            id?: string;
            /** @description last time the device was seen online (timestamp in milliseconds) */
            lastSeenTimestamp?: number;
            /** @description Location metadata */
            locationMetadata?: components["schemas"]["models.DeviceLocationMetadata"];
            /** @description Metadata */
            metadata?: components["schemas"]["models.DeviceMetadata"];
            /** @description Device information
             *     Note: DeviceId is a unique identifier for the device, it can be used to identify the device in the system.
             *     DeviceType is used to identify the type of device, such as camera, sensor, access control, etc. */
            name?: string;
            organisationId?: string;
            /** @description e.g. "v1.0.0-abcdef123456" */
            releaseHash?: string;
            /** @description RBAC information
             *     Note: SiteId is used to identify the site where the device is located.
             *     GroupId is used to identify the group of devices.
             *     OrganisationId is used to identify the organisation that owns the device.
             *     FeaturePermissions is used to identify the permissions of the device, such as read, write, delete, etc. */
            siteId?: string;
            /** @description Device status
             *     Note: Status is used to identify the status of the device, such as online, offline, maintenance, etc.
             *     LastSeenTimestamp is used to identify the last time the device was seen online. */
            status?: string;
            /** @description Versioning information
             *     Note: Version is used to identify the version of the device software.
             *     ReleaseHash is used to identify the release hash of the device software, it can be used to identify the specific build of the device software.
             *     Deployment is used to identify the deployment type of the device, such as factory, docker, docker compose, kubernetes, etc. */
            version?: string;
        };
        "models.DeviceAtRuntimeMetadata": Record<string, never>;
        "models.DeviceCameraMetadata": {
            /** @description Bitrate in kbps */
            bitrate?: number;
            /** @description e.g. "H.264", "H.265" */
            codec?: string;
            /** @description Frame rate in fps */
            frameRate?: number;
            /** @description Indicates if the camera supports audio */
            hasAudio?: boolean;
            /** @description Indicates if the camera has input/output capabilities */
            hasIO?: boolean;
            /** @description Indicates if the camera supports ONVIF protocol */
            hasOnvif?: boolean;
            /** @description Indicates if the camera supports pan and tilt functionality */
            hasPanTilt?: boolean;
            /** @description Indicates if the camera supports presets */
            hasPresets?: boolean;
            /** @description Indicates if the camera supports zoom functionality */
            hasZoom?: boolean;
            /** @description Input/Output capabilities of the camera (such as alarms, relays, etc.) */
            ios?: components["schemas"]["models.IO"][];
            /** @description Presets for the camera, used for quick positioning */
            presets?: components["schemas"]["models.Preset"][];
            /** @description e.g. "1920x1080", "1280x720" */
            resolution?: string;
            /** @description Tours for the camera, used for automated movements through presets */
            tours?: components["schemas"]["models.Tour"][];
        };
        "models.DeviceFeaturePermissions": {
            floorPlans?: number;
            io?: number;
            liveview?: number;
            ptz?: number;
            remoteConfig?: number;
        };
        "models.DeviceLocationMetadata": {
            fieldOfView?: number;
            location?: components["schemas"]["models.Location"];
            onFloorPlans?: string[];
        };
        "models.DeviceMetadata": {
            /** @description e.g. "Nest", "Ring" */
            brand?: string;
            /** @description e.g. "#FF5733" (hex color code) */
            color?: string;
            /** @description e.g. "Outdoor camera with night vision" */
            description?: string;
            /** @description Installation date in milliseconds since epoch */
            installationDate?: number;
            /** @description Last maintenance date in milliseconds since epoch */
            lastMaintenance?: number;
            /** @description e.g. "Nest Cam", "Ring Doorbell" */
            model?: string;
            /** @description Mute status, e.g. false for unmuted, true for muted */
            mute?: boolean;
        };
        "models.DevicePlacement": {
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            /** @description Color to represent the device on the floor plan */
            color?: string;
            /** @description ID of the device being placed */
            deviceId?: string;
            fabricKey?: string;
            /** @description Field of view in degrees, if applicable */
            fieldOfView?: number;
            /** @description Icon to represent the device on the floor plan */
            icon?: string;
            id?: string;
            /** @description Radius of the device placement circle */
            radius?: number;
            /** @description X relative to canvas width (0 to 1) */
            relativeX?: number;
            /** @description Y relative to canvas height (0 to 1) */
            relativeY?: number;
            /** @description End angle of the slice in degrees, if applicable */
            sliceEndAngle?: number;
            /** @description Middle angle of the slice in degrees, if applicable */
            sliceMiddleAngle?: number;
            /** @description Start angle of the slice in degrees, if applicable */
            sliceStartAngle?: number;
            /** @description Absolute X coordinate */
            x?: number;
            /** @description Absolute Y coordinate */
            y?: number;
        };
        "models.FeaturePermissions": {
            floorPlans?: number;
            io?: number;
            liveview?: number;
            ptz?: number;
            remote_config?: number;
        };
        "models.FloorPlan": {
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            /** @description List of devices placed on the floor plan */
            devicePlacements?: components["schemas"]["models.DevicePlacement"][];
            /** @description Dimensions of the floor plan in pixels */
            height?: number;
            id?: string;
            /** @description Base64 encoded image of the floor plan */
            image?: string;
            /** @description Name of the floor plan */
            name?: string;
            /** @description Dimensions of the floor plan in pixels */
            width?: number;
        };
        "models.IO": {
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            /** @description device identifier */
            deviceId?: string;
            external?: boolean;
            hash?: string;
            id?: string;
            key?: string;
            /** @description last time the IO was seen */
            lastSeenTimestamp?: number;
            /** @description input or output */
            type?: string;
            value?: string;
        };
        "models.Location": {
            /** @description e.g. "123 Main St, Anytown, USA" */
            address?: string;
            /** @description Altitude in meters */
            altitude?: number;
            latitude?: number;
            longitude?: number;
        };
        "models.Marker": {
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            /** @description Description of the marker */
            description?: string;
            /** @description Device information */
            deviceId?: string;
            /** @description Duration of the marker in milliseconds */
            duration?: number;
            /** @description End timestamp of the marker in milliseconds since epoch */
            endTimestamp?: number;
            /** @description GroupId is used to identify the group of markers */
            groupId?: string;
            id?: string;
            /** @description Media information */
            mediaIds?: string[];
            /** @description Additional metadata */
            metaData?: components["schemas"]["models.MarkerMetadata"];
            /** @description Name or identifier for the marker e.g., "a license plate (2-HCP-007), an unique identifier (transaction_id, point of sale), etc." */
            name?: string;
            /** @description OrganisationId is used to identify the organisation that owns the marker */
            organisationId?: string;
            /** @description RBAC information */
            siteId?: string;
            /** @description Timing information */
            startTimestamp?: number;
            /** @description Synchronize */
            synchronize?: components["schemas"]["models.Synchronize"];
            /** @description Type of the marker e.g., "alert", "event", "door_opened", "person", "car" etc. */
            type?: string;
        };
        "models.MarkerMetadata": {
            /** @description Additional comments or description of the marker */
            comments?: components["schemas"]["models.Comment"];
            /** @description Tags associated with the marker for categorization */
            tags?: string[];
        };
        "models.Media": {
            /** @description AtRuntimeMetadata contains metadata that is generated at runtime, which can include
             *     more verbose information about the device's current state, capabilities, or configuration.
             *     for example the linked sites details, etc. */
            atRuntimeMetadata?: components["schemas"]["models.MediaAtRuntimeMetadata"];
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            /** @description RBAC information
             *     DeviceId is a unique identifier for the device, it can be used to identify the device in the system.
             *     OrganisationId is used to identify the organisation that owns the device. */
            deviceId?: string;
            duration?: number;
            endTimestamp?: number;
            id?: string;
            /** @description Metadata */
            metadata?: components["schemas"]["models.MediaMetadata"];
            organisationId?: string;
            spriteFile?: string;
            spriteInterval?: number;
            spriteProvider?: string;
            /** @description Time window of media file. */
            startTimestamp?: number;
            /** @description Media file information (by default "vault", however might change
             *     in the future (integration with other storage solutions, next to Vault). */
            storageSolution?: string;
            thumbnailFile?: string;
            thumbnailProvider?: string;
            /** @description Media file information */
            videoFile?: string;
            /** @description Vault provider information (contains where the media is stored on which underlaying cloud storage) */
            videoProvider?: string;
        };
        "models.MediaAtRuntimeMetadata": {
            spriteUrl?: string;
            thumbnailUrl?: string;
            videoUrl?: string;
        };
        "models.MediaMetadata": {
            classifications?: string[];
            tags?: string[];
        };
        "models.Preset": {
            name?: string;
            token?: string;
            x?: number;
            y?: number;
            z?: number;
        };
        "models.Role": {
            featurePermissions?: components["schemas"]["models.FeaturePermissions"];
            id?: string;
            isActive?: number;
            pages?: string[];
            role?: string;
            roleName?: string;
            timeWindow?: components["schemas"]["models.TimeWindow"];
            timeWindowActive?: number;
            user_id?: string;
        };
        "models.Site": {
            /** @description Audit information */
            audit?: components["schemas"]["models.Audit"];
            description?: string;
            devices?: string[];
            groups?: string[];
            id?: string;
            /** @description Location metadata */
            locationMetadata?: components["schemas"]["models.SiteLocationMetadata"];
            /** @description Metadata */
            metadata?: components["schemas"]["models.SiteMetadata"];
            name?: string;
            /** @description RBAC information */
            organisationId?: string;
            /** @description Media file information (by default "vault", however might change
             *     in the future (integration with other storage solutions, next to Vault). */
            storageSolution?: string;
            vaultAccessKey?: string;
            vaultSecretKey?: string;
            vaultUri?: string;
        };
        "models.SiteLocationMetadata": {
            location?: components["schemas"]["models.Location"];
        };
        "models.SiteMetadata": {
            color?: string;
            /** @description List of floor plans associated with the site */
            floorPlans?: components["schemas"]["models.FloorPlan"][];
            initials?: string;
            numberOfFloorPlans?: number;
        };
        /** @enum {string} */
        "models.Status": "pending" | "skipped" | "assigned" | "inProgress" | "completed" | "failed";
        "models.Synchronize": {
            /** @description History of synchronization events */
            events?: components["schemas"]["models.SynchronizeEvent"][];
            /** @description Additional message or error description related to synchronization */
            message?: string;
            /** @description Status of synchronization with external systems */
            status?: components["schemas"]["models.Status"];
            /** @description Timestamp of the last synchronization attempt */
            timestamp?: number;
            /** @description ID of the worker handling synchronization */
            workerId?: string;
        };
        "models.SynchronizeEvent": {
            /** @description Additional message or error description related to synchronization */
            message?: string;
            /** @description Status of synchronization with external systems */
            status?: components["schemas"]["models.Status"];
            /** @description Timestamp of the last synchronization attempt */
            timestamp?: number;
            /** @description ID of the worker handling synchronization */
            workerId?: string;
        };
        "models.TimeWindow": {
            timeRange1MaxFriday?: number;
            timeRange1MaxMonday?: number;
            timeRange1MaxSaturday?: number;
            timeRange1MaxSunday?: number;
            timeRange1MaxThursday?: number;
            timeRange1MaxTuesday?: number;
            timeRange1MaxWednesday?: number;
            timeRange1MinFriday?: number;
            timeRange1MinMonday?: number;
            timeRange1MinSaturday?: number;
            timeRange1MinSunday?: number;
            timeRange1MinThursday?: number;
            timeRange1MinTuesday?: number;
            timeRange1MinWednesday?: number;
            timeRange2MaxFriday?: number;
            timeRange2MaxMonday?: number;
            timeRange2MaxSaturday?: number;
            timeRange2MaxSunday?: number;
            timeRange2MaxThursday?: number;
            timeRange2MaxTuesday?: number;
            timeRange2MaxWednesday?: number;
            timeRange2MinFriday?: number;
            timeRange2MinMonday?: number;
            timeRange2MinSaturday?: number;
            timeRange2MinSunday?: number;
            timeRange2MinThursday?: number;
            timeRange2MinTuesday?: number;
            timeRange2MinWednesday?: number;
        };
        "models.Tour": {
            current?: number;
            loop?: boolean;
            name?: string;
            presets?: components["schemas"]["models.Preset"][];
            running?: boolean;
            speed?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
export declare namespace models {
    type Audit = components['schemas']['models.Audit'];
    type Comment = components['schemas']['models.Comment'];
    type Device = components['schemas']['models.Device'];
    type DeviceCameraMetadata = components['schemas']['models.DeviceCameraMetadata'];
    type DeviceFeaturePermissions = components['schemas']['models.DeviceFeaturePermissions'];
    type DeviceLocationMetadata = components['schemas']['models.DeviceLocationMetadata'];
    type DeviceMetadata = components['schemas']['models.DeviceMetadata'];
    type DevicePlacement = components['schemas']['models.DevicePlacement'];
    type FeaturePermissions = components['schemas']['models.FeaturePermissions'];
    type FloorPlan = components['schemas']['models.FloorPlan'];
    type IO = components['schemas']['models.IO'];
    type Location = components['schemas']['models.Location'];
    type Marker = components['schemas']['models.Marker'];
    type MarkerMetadata = components['schemas']['models.MarkerMetadata'];
    type Media = components['schemas']['models.Media'];
    type MediaAtRuntimeMetadata = components['schemas']['models.MediaAtRuntimeMetadata'];
    type MediaMetadata = components['schemas']['models.MediaMetadata'];
    type Preset = components['schemas']['models.Preset'];
    type Role = components['schemas']['models.Role'];
    type Site = components['schemas']['models.Site'];
    type SiteLocationMetadata = components['schemas']['models.SiteLocationMetadata'];
    type SiteMetadata = components['schemas']['models.SiteMetadata'];
    type Synchronize = components['schemas']['models.Synchronize'];
    type SynchronizeEvent = components['schemas']['models.SynchronizeEvent'];
    type TimeWindow = components['schemas']['models.TimeWindow'];
    type Tour = components['schemas']['models.Tour'];
}
export declare namespace api {
    type ErrorResponse = components['schemas']['api.ErrorResponse'];
    type Metadata = components['schemas']['api.Metadata'];
    type SuccessResponse = components['schemas']['api.SuccessResponse'];
}
export declare namespace models {
    type Audit = components['schemas']['models.Audit'];
    type Comment = components['schemas']['models.Comment'];
    type Device = components['schemas']['models.Device'];
    type DeviceCameraMetadata = components['schemas']['models.DeviceCameraMetadata'];
    type DeviceFeaturePermissions = components['schemas']['models.DeviceFeaturePermissions'];
    type DeviceLocationMetadata = components['schemas']['models.DeviceLocationMetadata'];
    type DeviceMetadata = components['schemas']['models.DeviceMetadata'];
    type DevicePlacement = components['schemas']['models.DevicePlacement'];
    type FeaturePermissions = components['schemas']['models.FeaturePermissions'];
    type FloorPlan = components['schemas']['models.FloorPlan'];
    type IO = components['schemas']['models.IO'];
    type Location = components['schemas']['models.Location'];
    type Marker = components['schemas']['models.Marker'];
    type MarkerMetadata = components['schemas']['models.MarkerMetadata'];
    type Media = components['schemas']['models.Media'];
    type MediaAtRuntimeMetadata = components['schemas']['models.MediaAtRuntimeMetadata'];
    type MediaMetadata = components['schemas']['models.MediaMetadata'];
    type Preset = components['schemas']['models.Preset'];
    type Role = components['schemas']['models.Role'];
    type Site = components['schemas']['models.Site'];
    type SiteLocationMetadata = components['schemas']['models.SiteLocationMetadata'];
    type SiteMetadata = components['schemas']['models.SiteMetadata'];
    type Synchronize = components['schemas']['models.Synchronize'];
    type SynchronizeEvent = components['schemas']['models.SynchronizeEvent'];
    type TimeWindow = components['schemas']['models.TimeWindow'];
    type Tour = components['schemas']['models.Tour'];
}
export declare namespace api {
    type ErrorResponse = components['schemas']['api.ErrorResponse'];
    type Metadata = components['schemas']['api.Metadata'];
    type SuccessResponse = components['schemas']['api.SuccessResponse'];
}
