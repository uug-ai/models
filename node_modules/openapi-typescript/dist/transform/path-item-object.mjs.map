{"version":3,"file":"path-item-object.mjs","sources":["../../src/transform/path-item-object.ts"],"sourcesContent":["import ts from \"typescript\";\nimport { NEVER, QUESTION_TOKEN, addJSDocComment, oapiRef, tsModifiers, tsPropertyIndex } from \"../lib/ts.js\";\nimport { createRef } from \"../lib/utils.js\";\nimport type {\n  OperationObject,\n  ParameterObject,\n  PathItemObject,\n  ReferenceObject,\n  TransformNodeOptions,\n} from \"../types.js\";\nimport transformOperationObject, { injectOperationObject } from \"./operation-object.js\";\nimport { transformParametersArray } from \"./parameters-array.js\";\n\nexport type Method = \"get\" | \"put\" | \"post\" | \"delete\" | \"options\" | \"head\" | \"patch\" | \"trace\";\n\n/**\n * Transform PathItem nodes (4.8.9)\n * @see https://spec.openapis.org/oas/v3.1.0#path-item-object\n */\nexport default function transformPathItemObject(pathItem: PathItemObject, options: TransformNodeOptions): ts.TypeNode {\n  const type: ts.TypeElement[] = [];\n\n  // parameters\n  type.push(\n    ...transformParametersArray(pathItem.parameters ?? [], {\n      ...options,\n      path: createRef([options.path, \"parameters\"]),\n    }),\n  );\n\n  // methods\n  for (const method of [\"get\", \"put\", \"post\", \"delete\", \"options\", \"head\", \"patch\", \"trace\"] as Method[]) {\n    const operationObject = pathItem[method];\n    if (\n      !operationObject ||\n      (options.ctx.excludeDeprecated &&\n        (\"$ref\" in operationObject ? options.ctx.resolve<OperationObject>(operationObject.$ref) : operationObject)\n          ?.deprecated)\n    ) {\n      type.push(\n        ts.factory.createPropertySignature(\n          /* modifiers     */ tsModifiers({ readonly: options.ctx.immutable }),\n          /* name          */ tsPropertyIndex(method),\n          /* questionToken */ QUESTION_TOKEN,\n          /* type          */ NEVER,\n        ),\n      );\n      continue;\n    }\n\n    // fold top-level PathItem parameters into method-level, with the latter overriding the former\n    const keyedParameters: Record<string, ParameterObject | ReferenceObject> = {};\n    if (!(\"$ref\" in operationObject)) {\n      // important: OperationObject parameters come last, and will override any conflicts with PathItem parameters\n      for (const parameter of [...(pathItem.parameters ?? []), ...(operationObject.parameters ?? [])]) {\n        // fix: #1798, use unique key\n        const name =\n          \"$ref\" in parameter\n            ? `${options.ctx.resolve<ParameterObject>(parameter.$ref)?.in}-${options.ctx.resolve<ParameterObject>(parameter.$ref)?.name}`\n            : `${parameter.in}-${parameter.name}`;\n        if (name) {\n          keyedParameters[name] = parameter;\n        }\n      }\n    }\n\n    let operationType: ts.TypeNode;\n    if (\"$ref\" in operationObject) {\n      operationType = oapiRef(operationObject.$ref);\n    }\n    // if operationId exists, move into an `operations` export and pass the reference in here\n    else if (operationObject.operationId) {\n      // workaround for issue caused by redocly ref parsing: https://github.com/openapi-ts/openapi-typescript/issues/1542\n      const operationId = operationObject.operationId.replace(HASH_RE, \"/\");\n      operationType = oapiRef(createRef([\"operations\", operationId]));\n      injectOperationObject(\n        operationId,\n        { ...operationObject, parameters: Object.values(keyedParameters) },\n        { ...options, path: createRef([options.path, method]) },\n      );\n    } else {\n      operationType = ts.factory.createTypeLiteralNode(\n        transformOperationObject(\n          { ...operationObject, parameters: Object.values(keyedParameters) },\n          { ...options, path: createRef([options.path, method]) },\n        ),\n      );\n    }\n    const property = ts.factory.createPropertySignature(\n      /* modifiers     */ tsModifiers({ readonly: options.ctx.immutable }),\n      /* name          */ tsPropertyIndex(method),\n      /* questionToken */ undefined,\n      /* type          */ operationType,\n    );\n    addJSDocComment(operationObject, property);\n    type.push(property);\n  }\n\n  return ts.factory.createTypeLiteralNode(type);\n}\n\nconst HASH_RE = /#/g;\n"],"names":[],"mappings":";;;;;;AAmBwB,SAAA,uBAAA,CAAwB,UAA0B,OAA4C,EAAA;AACpH,EAAA,MAAM,OAAyB,EAAC;AAGhC,EAAK,IAAA,CAAA,IAAA;AAAA,IACH,GAAG,wBAAA,CAAyB,QAAS,CAAA,UAAA,IAAc,EAAI,EAAA;AAAA,MACrD,GAAG,OAAA;AAAA,MACH,MAAM,SAAU,CAAA,CAAC,OAAQ,CAAA,IAAA,EAAM,YAAY,CAAC;AAAA,KAC7C;AAAA,GACH;AAGA,EAAW,KAAA,MAAA,MAAA,IAAU,CAAC,KAAA,EAAO,KAAO,EAAA,MAAA,EAAQ,UAAU,SAAW,EAAA,MAAA,EAAQ,OAAS,EAAA,OAAO,CAAe,EAAA;AACtG,IAAM,MAAA,eAAA,GAAkB,SAAS,MAAM,CAAA;AACvC,IAAA,IACE,CAAC,eAAA,IACA,OAAQ,CAAA,GAAA,CAAI,sBACV,MAAU,IAAA,eAAA,GAAkB,OAAQ,CAAA,GAAA,CAAI,OAAyB,CAAA,eAAA,CAAgB,IAAI,CAAA,GAAI,kBACtF,UACN,EAAA;AACA,MAAK,IAAA,CAAA,IAAA;AAAA,QACH,GAAG,OAAQ,CAAA,uBAAA;AAAA;AAAA,UACW,YAAY,EAAE,QAAA,EAAU,OAAQ,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA;AAAA,UAC/C,gBAAgB,MAAM,CAAA;AAAA;AAAA,UACtB,cAAA;AAAA;AAAA,UACA;AAAA;AACtB,OACF;AACA,MAAA;AAAA;AAIF,IAAA,MAAM,kBAAqE,EAAC;AAC5E,IAAI,IAAA,EAAE,UAAU,eAAkB,CAAA,EAAA;AAEhC,MAAA,KAAA,MAAW,SAAa,IAAA,CAAC,GAAI,QAAA,CAAS,UAAc,IAAA,EAAK,EAAA,GAAI,eAAgB,CAAA,UAAA,IAAc,EAAG,CAAG,EAAA;AAE/F,QAAM,MAAA,IAAA,GACJ,MAAU,IAAA,SAAA,GACN,CAAG,EAAA,OAAA,CAAQ,IAAI,OAAyB,CAAA,SAAA,CAAU,IAAI,CAAA,EAAG,EAAE,CAAA,CAAA,EAAI,QAAQ,GAAI,CAAA,OAAA,CAAyB,SAAU,CAAA,IAAI,CAAG,EAAA,IAAI,CACzH,CAAA,GAAA,CAAA,EAAG,SAAU,CAAA,EAAE,CAAI,CAAA,EAAA,SAAA,CAAU,IAAI,CAAA,CAAA;AACvC,QAAA,IAAI,IAAM,EAAA;AACR,UAAA,eAAA,CAAgB,IAAI,CAAI,GAAA,SAAA;AAAA;AAC1B;AACF;AAGF,IAAI,IAAA,aAAA;AACJ,IAAA,IAAI,UAAU,eAAiB,EAAA;AAC7B,MAAgB,aAAA,GAAA,OAAA,CAAQ,gBAAgB,IAAI,CAAA;AAAA,KAC9C,MAAA,IAES,gBAAgB,WAAa,EAAA;AAEpC,MAAA,MAAM,WAAc,GAAA,eAAA,CAAgB,WAAY,CAAA,OAAA,CAAQ,SAAS,GAAG,CAAA;AACpE,MAAA,aAAA,GAAgB,QAAQ,SAAU,CAAA,CAAC,YAAc,EAAA,WAAW,CAAC,CAAC,CAAA;AAC9D,MAAA,qBAAA;AAAA,QACE,WAAA;AAAA,QACA,EAAE,GAAG,eAAA,EAAiB,YAAY,MAAO,CAAA,MAAA,CAAO,eAAe,CAAE,EAAA;AAAA,QACjE,EAAE,GAAG,OAAA,EAAS,IAAM,EAAA,SAAA,CAAU,CAAC,OAAQ,CAAA,IAAA,EAAM,MAAM,CAAC,CAAE;AAAA,OACxD;AAAA,KACK,MAAA;AACL,MAAA,aAAA,GAAgB,GAAG,OAAQ,CAAA,qBAAA;AAAA,QACzB,wBAAA;AAAA,UACE,EAAE,GAAG,eAAA,EAAiB,YAAY,MAAO,CAAA,MAAA,CAAO,eAAe,CAAE,EAAA;AAAA,UACjE,EAAE,GAAG,OAAA,EAAS,IAAM,EAAA,SAAA,CAAU,CAAC,OAAQ,CAAA,IAAA,EAAM,MAAM,CAAC,CAAE;AAAA;AACxD,OACF;AAAA;AAEF,IAAM,MAAA,QAAA,GAAW,GAAG,OAAQ,CAAA,uBAAA;AAAA;AAAA,MACN,YAAY,EAAE,QAAA,EAAU,OAAQ,CAAA,GAAA,CAAI,WAAW,CAAA;AAAA;AAAA,MAC/C,gBAAgB,MAAM,CAAA;AAAA;AAAA,MACtB,MAAA;AAAA;AAAA,MACA;AAAA,KACtB;AACA,IAAA,eAAA,CAAgB,iBAAiB,QAAQ,CAAA;AACzC,IAAA,IAAA,CAAK,KAAK,QAAQ,CAAA;AAAA;AAGpB,EAAO,OAAA,EAAA,CAAG,OAAQ,CAAA,qBAAA,CAAsB,IAAI,CAAA;AAC9C;AAEA,MAAM,OAAU,GAAA,IAAA;;;;"}