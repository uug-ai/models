{"version":3,"file":"webhooks-object.mjs","sources":["../../src/transform/webhooks-object.ts"],"sourcesContent":["import ts from \"typescript\";\nimport { tsModifiers, tsPropertyIndex } from \"../lib/ts.js\";\nimport { createRef, getEntries } from \"../lib/utils.js\";\nimport type { GlobalContext, WebhooksObject } from \"../types.js\";\nimport transformPathItemObject from \"./path-item-object.js\";\n\nexport default function transformWebhooksObject(webhooksObject: WebhooksObject, options: GlobalContext): ts.TypeNode {\n  const type: ts.TypeElement[] = [];\n\n  for (const [name, pathItemObject] of getEntries(webhooksObject, options)) {\n    type.push(\n      ts.factory.createPropertySignature(\n        /* modifiers     */ tsModifiers({\n          readonly: options.immutable,\n        }),\n        /* name          */ tsPropertyIndex(name),\n        /* questionToken */ undefined,\n        /* type          */ transformPathItemObject(pathItemObject, {\n          path: createRef([\"webhooks\", name]),\n          ctx: options,\n        }),\n      ),\n    );\n  }\n\n  return ts.factory.createTypeLiteralNode(type);\n}\n"],"names":[],"mappings":";;;;;AAMwB,SAAA,uBAAA,CAAwB,gBAAgC,OAAqC,EAAA;AACnH,EAAA,MAAM,OAAyB,EAAC;AAEhC,EAAA,KAAA,MAAW,CAAC,IAAM,EAAA,cAAc,KAAK,UAAW,CAAA,cAAA,EAAgB,OAAO,CAAG,EAAA;AACxE,IAAK,IAAA,CAAA,IAAA;AAAA,MACH,GAAG,OAAQ,CAAA,uBAAA;AAAA;AAAA,QACW,WAAY,CAAA;AAAA,UAC9B,UAAU,OAAQ,CAAA;AAAA,SACnB,CAAA;AAAA;AAAA,QACmB,gBAAgB,IAAI,CAAA;AAAA;AAAA,QACpB,MAAA;AAAA;AAAA,QACA,wBAAwB,cAAgB,EAAA;AAAA,UAC1D,IAAM,EAAA,SAAA,CAAU,CAAC,UAAA,EAAY,IAAI,CAAC,CAAA;AAAA,UAClC,GAAK,EAAA;AAAA,SACN;AAAA;AACH,KACF;AAAA;AAGF,EAAO,OAAA,EAAA,CAAG,OAAQ,CAAA,qBAAA,CAAsB,IAAI,CAAA;AAC9C;;;;"}