{
    "swagger": "2.0",
    "info": {
        "description": "API for media models and related types",
        "title": "Models API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost",
    "basePath": "/",
    "paths": {
        "/internal/audit": {
            "get": {
                "description": "Internal endpoint used only to ensure Audit schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Audit (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Audit"
                        }
                    }
                }
            }
        },
        "/internal/comment": {
            "get": {
                "description": "Internal endpoint used only to ensure Comment schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Comment (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Comment"
                        }
                    }
                }
            }
        },
        "/internal/device": {
            "get": {
                "description": "Internal endpoint used only to ensure Device schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Device (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Device"
                        }
                    }
                }
            }
        },
        "/internal/deviceatruntimemetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure DeviceAtRuntimeMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get DeviceAtRuntimeMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceAtRuntimeMetadata"
                        }
                    }
                }
            }
        },
        "/internal/devicecamerametadata": {
            "get": {
                "description": "Internal endpoint used only to ensure DeviceCameraMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get DeviceCameraMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceCameraMetadata"
                        }
                    }
                }
            }
        },
        "/internal/devicefeaturepermissions": {
            "get": {
                "description": "Internal endpoint used only to ensure DeviceFeaturePermissions schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get DeviceFeaturePermissions (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceFeaturePermissions"
                        }
                    }
                }
            }
        },
        "/internal/devicelocationmetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure DeviceLocationMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get DeviceLocationMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceLocationMetadata"
                        }
                    }
                }
            }
        },
        "/internal/devicemetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure DeviceMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get DeviceMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DeviceMetadata"
                        }
                    }
                }
            }
        },
        "/internal/deviceplacement": {
            "get": {
                "description": "Internal endpoint used only to ensure DevicePlacement schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get DevicePlacement (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.DevicePlacement"
                        }
                    }
                }
            }
        },
        "/internal/featurepermissions": {
            "get": {
                "description": "Internal endpoint used only to ensure FeaturePermissions schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get FeaturePermissions (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FeaturePermissions"
                        }
                    }
                }
            }
        },
        "/internal/floorplan": {
            "get": {
                "description": "Internal endpoint used only to ensure FloorPlan schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get FloorPlan (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.FloorPlan"
                        }
                    }
                }
            }
        },
        "/internal/io": {
            "get": {
                "description": "Internal endpoint used only to ensure IO schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get IO (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.IO"
                        }
                    }
                }
            }
        },
        "/internal/location": {
            "get": {
                "description": "Internal endpoint used only to ensure Location schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Location (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Location"
                        }
                    }
                }
            }
        },
        "/internal/marker": {
            "get": {
                "description": "Internal endpoint used only to ensure Marker schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Marker (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Marker"
                        }
                    }
                }
            }
        },
        "/internal/markermetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure MarkerMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get MarkerMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MarkerMetadata"
                        }
                    }
                }
            }
        },
        "/internal/mediaatruntimemetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure MediaAtRuntimeMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get MediaAtRuntimeMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MediaAtRuntimeMetadata"
                        }
                    }
                }
            }
        },
        "/internal/mediametadata": {
            "get": {
                "description": "Internal endpoint used only to ensure MediaMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get MediaMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.MediaMetadata"
                        }
                    }
                }
            }
        },
        "/internal/preset": {
            "get": {
                "description": "Internal endpoint used only to ensure Preset schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Preset (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Preset"
                        }
                    }
                }
            }
        },
        "/internal/role": {
            "get": {
                "description": "Internal endpoint used only to ensure Role schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Role (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    }
                }
            }
        },
        "/internal/site": {
            "get": {
                "description": "Internal endpoint used only to ensure Site schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Site (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Site"
                        }
                    }
                }
            }
        },
        "/internal/sitelocationmetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure SiteLocationMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get SiteLocationMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SiteLocationMetadata"
                        }
                    }
                }
            }
        },
        "/internal/sitemetadata": {
            "get": {
                "description": "Internal endpoint used only to ensure SiteMetadata schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get SiteMetadata (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SiteMetadata"
                        }
                    }
                }
            }
        },
        "/internal/synchronize": {
            "get": {
                "description": "Internal endpoint used only to ensure Synchronize schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Synchronize (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Synchronize"
                        }
                    }
                }
            }
        },
        "/internal/synchronizeevent": {
            "get": {
                "description": "Internal endpoint used only to ensure SynchronizeEvent schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get SynchronizeEvent (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.SynchronizeEvent"
                        }
                    }
                }
            }
        },
        "/internal/timewindow": {
            "get": {
                "description": "Internal endpoint used only to ensure TimeWindow schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get TimeWindow (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TimeWindow"
                        }
                    }
                }
            }
        },
        "/internal/tour": {
            "get": {
                "description": "Internal endpoint used only to ensure Tour schema is generated in OpenAPI spec",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "internal"
                ],
                "summary": "Get Tour (schema generation only)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Tour"
                        }
                    }
                }
            }
        },
        "/media": {
            "post": {
                "description": "Create a new media item",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media"
                ],
                "summary": "Create a new media item",
                "parameters": [
                    {
                        "description": "Media object",
                        "name": "media",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Media"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/media/{id}": {
            "get": {
                "description": "Get a media item by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "media"
                ],
                "summary": "Get a media item",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Media ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "applicationStatusCode": {
                    "description": "Application-specific error code",
                    "type": "integer"
                },
                "httpStatusCode": {
                    "description": "HTTP status code for the error",
                    "type": "integer"
                },
                "message": {
                    "description": "Error message describing the issue",
                    "type": "string"
                },
                "metaData": {
                    "description": "Additional metadata about the error, such as timestamps and request IDs",
                    "allOf": [
                        {
                            "$ref": "#/definitions/api.Metadata"
                        }
                    ]
                }
            }
        },
        "api.Metadata": {
            "type": "object",
            "properties": {
                "error": {
                    "description": "Error message if any",
                    "type": "string"
                },
                "function": {
                    "type": "string"
                },
                "organisationId": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "traceId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "api.SuccessResponse": {
            "type": "object",
            "properties": {
                "applicationStatusCode": {
                    "type": "integer"
                },
                "httpStatusCode": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "metaData": {
                    "$ref": "#/definitions/api.Metadata"
                }
            }
        },
        "models.Audit": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "integer"
                },
                "createdBy": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "integer"
                },
                "updatedBy": {
                    "type": "string"
                }
            }
        },
        "models.Comment": {
            "type": "object",
            "properties": {
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "author": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "deviceId": {
                    "description": "RBAC information\nDeviceId is a unique identifier for the device, it can be used to identify the device in the system.\nOrganisationId is used to identify the organisation that owns the device.",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "organisationId": {
                    "type": "string"
                },
                "parentId": {
                    "description": "ID of the parent comment, if this is a reply",
                    "type": "string"
                },
                "timestamps": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "type": {
                    "description": "Comment information",
                    "type": "string"
                }
            }
        },
        "models.Device": {
            "type": "object",
            "properties": {
                "atRuntimeMetadata": {
                    "description": "AtRuntimeMetadata contains metadata that is generated at runtime, which can include\nmore verbose information about the device's current state, capabilities, or configuration.\nfor example the linked sites details, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeviceAtRuntimeMetadata"
                        }
                    ]
                },
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "cameraMetadata": {
                    "description": "Camera Metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeviceCameraMetadata"
                        }
                    ]
                },
                "deployment": {
                    "description": "e.g. \"factory\", \"docker\", \"docker compose\", \"kubernetes\"",
                    "type": "string"
                },
                "deviceId": {
                    "type": "string"
                },
                "deviceType": {
                    "description": "e.g. \"camera\", \"sensor\", \"access_control\"",
                    "type": "string"
                },
                "featurePermissions": {
                    "description": "FeaturePermissions is used to identify the permissions of the device, such as read, write, delete, etc.\nIt is a map of feature names to permissions.\nFor example, \"camera\" can have permissions like \"read\", \"write\", \"delete\", etc.\nThis allows for fine-grained control over what features are accessible by users or groups.\nFeaturePermissions can be used to implement Role-Based Access Control (RBAC) for devices.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeviceFeaturePermissions"
                        }
                    ]
                },
                "groupId": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastSeenTimestamp": {
                    "description": "last time the device was seen online (timestamp in milliseconds)",
                    "type": "integer"
                },
                "locationMetadata": {
                    "description": "Location metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeviceLocationMetadata"
                        }
                    ]
                },
                "metadata": {
                    "description": "Metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.DeviceMetadata"
                        }
                    ]
                },
                "name": {
                    "description": "Device information\nNote: DeviceId is a unique identifier for the device, it can be used to identify the device in the system.\nDeviceType is used to identify the type of device, such as camera, sensor, access control, etc.",
                    "type": "string"
                },
                "organisationId": {
                    "type": "string"
                },
                "releaseHash": {
                    "description": "e.g. \"v1.0.0-abcdef123456\"",
                    "type": "string"
                },
                "siteId": {
                    "description": "RBAC information\nNote: SiteId is used to identify the site where the device is located.\nGroupId is used to identify the group of devices.\nOrganisationId is used to identify the organisation that owns the device.\nFeaturePermissions is used to identify the permissions of the device, such as read, write, delete, etc.",
                    "type": "string"
                },
                "status": {
                    "description": "Device status\nNote: Status is used to identify the status of the device, such as online, offline, maintenance, etc.\nLastSeenTimestamp is used to identify the last time the device was seen online.",
                    "type": "string"
                },
                "version": {
                    "description": "Versioning information\nNote: Version is used to identify the version of the device software.\nReleaseHash is used to identify the release hash of the device software, it can be used to identify the specific build of the device software.\nDeployment is used to identify the deployment type of the device, such as factory, docker, docker compose, kubernetes, etc.",
                    "type": "string"
                }
            }
        },
        "models.DeviceAtRuntimeMetadata": {
            "type": "object"
        },
        "models.DeviceCameraMetadata": {
            "type": "object",
            "properties": {
                "bitrate": {
                    "description": "Bitrate in kbps",
                    "type": "integer"
                },
                "codec": {
                    "description": "e.g. \"H.264\", \"H.265\"",
                    "type": "string"
                },
                "frameRate": {
                    "description": "Frame rate in fps",
                    "type": "integer"
                },
                "hasAudio": {
                    "description": "Indicates if the camera supports audio",
                    "type": "boolean"
                },
                "hasIO": {
                    "description": "Indicates if the camera has input/output capabilities",
                    "type": "boolean"
                },
                "hasOnvif": {
                    "description": "Indicates if the camera supports ONVIF protocol",
                    "type": "boolean"
                },
                "hasPanTilt": {
                    "description": "Indicates if the camera supports pan and tilt functionality",
                    "type": "boolean"
                },
                "hasPresets": {
                    "description": "Indicates if the camera supports presets",
                    "type": "boolean"
                },
                "hasZoom": {
                    "description": "Indicates if the camera supports zoom functionality",
                    "type": "boolean"
                },
                "ios": {
                    "description": "Input/Output capabilities of the camera (such as alarms, relays, etc.)",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.IO"
                    }
                },
                "presets": {
                    "description": "Presets for the camera, used for quick positioning",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Preset"
                    }
                },
                "resolution": {
                    "description": "e.g. \"1920x1080\", \"1280x720\"",
                    "type": "string"
                },
                "tours": {
                    "description": "Tours for the camera, used for automated movements through presets",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Tour"
                    }
                }
            }
        },
        "models.DeviceFeaturePermissions": {
            "type": "object",
            "properties": {
                "floorPlans": {
                    "type": "integer"
                },
                "io": {
                    "type": "integer"
                },
                "liveview": {
                    "type": "integer"
                },
                "ptz": {
                    "type": "integer"
                },
                "remoteConfig": {
                    "type": "integer"
                }
            }
        },
        "models.DeviceLocationMetadata": {
            "type": "object",
            "properties": {
                "fieldOfView": {
                    "type": "number"
                },
                "location": {
                    "$ref": "#/definitions/models.Location"
                },
                "onFloorPlans": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.DeviceMetadata": {
            "type": "object",
            "properties": {
                "brand": {
                    "description": "e.g. \"Nest\", \"Ring\"",
                    "type": "string"
                },
                "color": {
                    "description": "e.g. \"#FF5733\" (hex color code)",
                    "type": "string"
                },
                "description": {
                    "description": "e.g. \"Outdoor camera with night vision\"",
                    "type": "string"
                },
                "installationDate": {
                    "description": "Installation date in milliseconds since epoch",
                    "type": "integer"
                },
                "lastMaintenance": {
                    "description": "Last maintenance date in milliseconds since epoch",
                    "type": "integer"
                },
                "model": {
                    "description": "e.g. \"Nest Cam\", \"Ring Doorbell\"",
                    "type": "string"
                },
                "mute": {
                    "description": "Mute status, e.g. false for unmuted, true for muted",
                    "type": "boolean"
                }
            }
        },
        "models.DevicePlacement": {
            "type": "object",
            "properties": {
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "color": {
                    "description": "Color to represent the device on the floor plan",
                    "type": "string"
                },
                "deviceId": {
                    "description": "ID of the device being placed",
                    "type": "string"
                },
                "fabricKey": {
                    "type": "string"
                },
                "fieldOfView": {
                    "description": "Field of view in degrees, if applicable",
                    "type": "number"
                },
                "icon": {
                    "description": "Icon to represent the device on the floor plan",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "radius": {
                    "description": "Radius of the device placement circle",
                    "type": "number"
                },
                "relativeX": {
                    "description": "X relative to canvas width (0 to 1)",
                    "type": "number"
                },
                "relativeY": {
                    "description": "Y relative to canvas height (0 to 1)",
                    "type": "number"
                },
                "sliceEndAngle": {
                    "description": "End angle of the slice in degrees, if applicable",
                    "type": "number"
                },
                "sliceMiddleAngle": {
                    "description": "Middle angle of the slice in degrees, if applicable",
                    "type": "number"
                },
                "sliceStartAngle": {
                    "description": "Start angle of the slice in degrees, if applicable",
                    "type": "number"
                },
                "x": {
                    "description": "Absolute X coordinate",
                    "type": "number"
                },
                "y": {
                    "description": "Absolute Y coordinate",
                    "type": "number"
                }
            }
        },
        "models.FeaturePermissions": {
            "type": "object",
            "properties": {
                "floorPlans": {
                    "type": "integer"
                },
                "io": {
                    "type": "integer"
                },
                "liveview": {
                    "type": "integer"
                },
                "ptz": {
                    "type": "integer"
                },
                "remote_config": {
                    "type": "integer"
                }
            }
        },
        "models.FloorPlan": {
            "type": "object",
            "properties": {
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "devicePlacements": {
                    "description": "List of devices placed on the floor plan",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DevicePlacement"
                    }
                },
                "height": {
                    "description": "Dimensions of the floor plan in pixels",
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "image": {
                    "description": "Base64 encoded image of the floor plan",
                    "type": "string"
                },
                "name": {
                    "description": "Name of the floor plan",
                    "type": "string"
                },
                "width": {
                    "description": "Dimensions of the floor plan in pixels",
                    "type": "integer"
                }
            }
        },
        "models.IO": {
            "type": "object",
            "properties": {
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "deviceId": {
                    "description": "device identifier",
                    "type": "string"
                },
                "external": {
                    "type": "boolean"
                },
                "hash": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "lastSeenTimestamp": {
                    "description": "last time the IO was seen",
                    "type": "integer"
                },
                "type": {
                    "description": "input or output",
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.Location": {
            "type": "object",
            "properties": {
                "address": {
                    "description": "e.g. \"123 Main St, Anytown, USA\"",
                    "type": "string"
                },
                "altitude": {
                    "description": "Altitude in meters",
                    "type": "number"
                },
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                }
            }
        },
        "models.Marker": {
            "type": "object",
            "properties": {
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "description": {
                    "description": "Description of the marker",
                    "type": "string"
                },
                "deviceId": {
                    "description": "Device information",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration of the marker in milliseconds",
                    "type": "integer"
                },
                "endTimestamp": {
                    "description": "End timestamp of the marker in milliseconds since epoch",
                    "type": "integer"
                },
                "groupId": {
                    "description": "GroupId is used to identify the group of markers",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "mediaIds": {
                    "description": "Media information",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metaData": {
                    "description": "Additional metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MarkerMetadata"
                        }
                    ]
                },
                "name": {
                    "description": "Name or identifier for the marker e.g., \"a license plate (2-HCP-007), an unique identifier (transaction_id, point of sale), etc.\"",
                    "type": "string"
                },
                "organisationId": {
                    "description": "OrganisationId is used to identify the organisation that owns the marker",
                    "type": "string"
                },
                "siteId": {
                    "description": "RBAC information",
                    "type": "string"
                },
                "startTimestamp": {
                    "description": "Timing information",
                    "type": "integer"
                },
                "synchronize": {
                    "description": "Synchronize",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Synchronize"
                        }
                    ]
                },
                "type": {
                    "description": "Type of the marker e.g., \"alert\", \"event\", \"door_opened\", \"person\", \"car\" etc.",
                    "type": "string"
                }
            }
        },
        "models.MarkerMetadata": {
            "type": "object",
            "properties": {
                "comments": {
                    "description": "Additional comments or description of the marker",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Comment"
                        }
                    ]
                },
                "tags": {
                    "description": "Tags associated with the marker for categorization",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Media": {
            "type": "object",
            "properties": {
                "atRuntimeMetadata": {
                    "description": "AtRuntimeMetadata contains metadata that is generated at runtime, which can include\nmore verbose information about the device's current state, capabilities, or configuration.\nfor example the linked sites details, etc.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaAtRuntimeMetadata"
                        }
                    ]
                },
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "deviceId": {
                    "description": "RBAC information\nDeviceId is a unique identifier for the device, it can be used to identify the device in the system.\nOrganisationId is used to identify the organisation that owns the device.",
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "endTimestamp": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "metadata": {
                    "description": "Metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.MediaMetadata"
                        }
                    ]
                },
                "organisationId": {
                    "type": "string"
                },
                "spriteFile": {
                    "type": "string"
                },
                "spriteInterval": {
                    "type": "integer"
                },
                "spriteProvider": {
                    "type": "string"
                },
                "startTimestamp": {
                    "description": "Time window of media file.",
                    "type": "integer"
                },
                "storageSolution": {
                    "description": "Media file information (by default \"vault\", however might change\nin the future (integration with other storage solutions, next to Vault).",
                    "type": "string"
                },
                "thumbnailFile": {
                    "type": "string"
                },
                "thumbnailProvider": {
                    "type": "string"
                },
                "videoFile": {
                    "description": "Media file information",
                    "type": "string"
                },
                "videoProvider": {
                    "description": "Vault provider information (contains where the media is stored on which underlaying cloud storage)",
                    "type": "string"
                }
            }
        },
        "models.MediaAtRuntimeMetadata": {
            "type": "object",
            "properties": {
                "spriteUrl": {
                    "type": "string"
                },
                "thumbnailUrl": {
                    "type": "string"
                },
                "videoUrl": {
                    "type": "string"
                }
            }
        },
        "models.MediaMetadata": {
            "type": "object",
            "properties": {
                "classifications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.Preset": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "x": {
                    "type": "number"
                },
                "y": {
                    "type": "number"
                },
                "z": {
                    "type": "number"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "featurePermissions": {
                    "$ref": "#/definitions/models.FeaturePermissions"
                },
                "id": {
                    "type": "string"
                },
                "isActive": {
                    "type": "integer"
                },
                "pages": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "role": {
                    "type": "string"
                },
                "roleName": {
                    "type": "string"
                },
                "timeWindow": {
                    "$ref": "#/definitions/models.TimeWindow"
                },
                "timeWindowActive": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.Site": {
            "type": "object",
            "properties": {
                "audit": {
                    "description": "Audit information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Audit"
                        }
                    ]
                },
                "description": {
                    "type": "string"
                },
                "devices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groups": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "locationMetadata": {
                    "description": "Location metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SiteLocationMetadata"
                        }
                    ]
                },
                "metadata": {
                    "description": "Metadata",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.SiteMetadata"
                        }
                    ]
                },
                "name": {
                    "type": "string"
                },
                "organisationId": {
                    "description": "RBAC information",
                    "type": "string"
                },
                "storageSolution": {
                    "description": "Media file information (by default \"vault\", however might change\nin the future (integration with other storage solutions, next to Vault).",
                    "type": "string"
                },
                "vaultAccessKey": {
                    "type": "string"
                },
                "vaultSecretKey": {
                    "type": "string"
                },
                "vaultUri": {
                    "type": "string"
                }
            }
        },
        "models.SiteLocationMetadata": {
            "type": "object",
            "properties": {
                "location": {
                    "$ref": "#/definitions/models.Location"
                }
            }
        },
        "models.SiteMetadata": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "floorPlans": {
                    "description": "List of floor plans associated with the site",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.FloorPlan"
                    }
                },
                "initials": {
                    "type": "string"
                },
                "numberOfFloorPlans": {
                    "type": "integer"
                }
            }
        },
        "models.Status": {
            "type": "string",
            "enum": [
                "pending",
                "skipped",
                "assigned",
                "inProgress",
                "completed",
                "failed"
            ],
            "x-enum-varnames": [
                "SynchronizeStatusPending",
                "SynchronizeStatusSkipped",
                "SynchronizeStatusAssigned",
                "SynchronizeStatusInProgress",
                "SynchronizeStatusCompleted",
                "SynchronizeStatusFailed"
            ]
        },
        "models.Synchronize": {
            "type": "object",
            "properties": {
                "events": {
                    "description": "History of synchronization events",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SynchronizeEvent"
                    }
                },
                "message": {
                    "description": "Additional message or error description related to synchronization",
                    "type": "string"
                },
                "status": {
                    "description": "Status of synchronization with external systems",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Status"
                        }
                    ]
                },
                "timestamp": {
                    "description": "Timestamp of the last synchronization attempt",
                    "type": "integer"
                },
                "workerId": {
                    "description": "ID of the worker handling synchronization",
                    "type": "string"
                }
            }
        },
        "models.SynchronizeEvent": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Additional message or error description related to synchronization",
                    "type": "string"
                },
                "status": {
                    "description": "Status of synchronization with external systems",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Status"
                        }
                    ]
                },
                "timestamp": {
                    "description": "Timestamp of the last synchronization attempt",
                    "type": "integer"
                },
                "workerId": {
                    "description": "ID of the worker handling synchronization",
                    "type": "string"
                }
            }
        },
        "models.TimeWindow": {
            "type": "object",
            "properties": {
                "timeRange1MaxFriday": {
                    "type": "number"
                },
                "timeRange1MaxMonday": {
                    "type": "number"
                },
                "timeRange1MaxSaturday": {
                    "type": "number"
                },
                "timeRange1MaxSunday": {
                    "type": "number"
                },
                "timeRange1MaxThursday": {
                    "type": "number"
                },
                "timeRange1MaxTuesday": {
                    "type": "number"
                },
                "timeRange1MaxWednesday": {
                    "type": "number"
                },
                "timeRange1MinFriday": {
                    "type": "number"
                },
                "timeRange1MinMonday": {
                    "type": "number"
                },
                "timeRange1MinSaturday": {
                    "type": "number"
                },
                "timeRange1MinSunday": {
                    "type": "number"
                },
                "timeRange1MinThursday": {
                    "type": "number"
                },
                "timeRange1MinTuesday": {
                    "type": "number"
                },
                "timeRange1MinWednesday": {
                    "type": "number"
                },
                "timeRange2MaxFriday": {
                    "type": "number"
                },
                "timeRange2MaxMonday": {
                    "type": "number"
                },
                "timeRange2MaxSaturday": {
                    "type": "number"
                },
                "timeRange2MaxSunday": {
                    "type": "number"
                },
                "timeRange2MaxThursday": {
                    "type": "number"
                },
                "timeRange2MaxTuesday": {
                    "type": "number"
                },
                "timeRange2MaxWednesday": {
                    "type": "number"
                },
                "timeRange2MinFriday": {
                    "type": "number"
                },
                "timeRange2MinMonday": {
                    "type": "number"
                },
                "timeRange2MinSaturday": {
                    "type": "number"
                },
                "timeRange2MinSunday": {
                    "type": "number"
                },
                "timeRange2MinThursday": {
                    "type": "number"
                },
                "timeRange2MinTuesday": {
                    "type": "number"
                },
                "timeRange2MinWednesday": {
                    "type": "number"
                }
            }
        },
        "models.Tour": {
            "type": "object",
            "properties": {
                "current": {
                    "type": "integer"
                },
                "loop": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "presets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Preset"
                    }
                },
                "running": {
                    "type": "boolean"
                },
                "speed": {
                    "type": "number"
                }
            }
        }
    }
}